

/*Generated by the BSD Licensed EViewGenerator T4 file*/
using System.Text;
using System.Collections.Generic;
using System;
using Earlz.EView;
using Earlz.EView.Internal;
using Earlz.EView.Helpers;

		//custom using statements for your views go here:
	
	
/*File: /home/earlz/Projects/EView/trunk/EView/Templates/PerformanceView.html */
namespace EViewEngine{
class PerformanceView : Earlz.EView.Internal.EViewDummy{
//Internal variables
	StringBuilder __Output=new StringBuilder();
public IEView Layout{get;set;}
//vIEW VARIABLES//
	public string test1{get;set;}
	public int test2{get;set;}
	public int? test3{get;set;}
	public object test4{get;set;}

//END VARIABLES//
//EXTERNAL CODE

//END EXTERNAL CODE
	void BuildOutput(){
//VIEW OUTPUT CODE//
__Output.Append(@"<html>
	<head>
		<title></title>
	</head>
	<body>
	");
__Output.Append(@"
	Test 1: ");
{
				object v;
				try{
					v=test1;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	");
__Output.Append(@"
	Test 2: ");
{
				object v;
				try{
					v=test2;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	");
__Output.Append(@"
	Test 3: ");
{
				object v;
				try{
					v=test3;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	");
__Output.Append(@"
	Test 4: ");
{
				object v;
				try{
					v=test4;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	<br />
	</body>
</html>
");

//END OUTPUT//
	}
//Internal code
	bool __InLayout=false; //internally used to prevent recursive loops in EViewRender()
	public override string EViewRender(){
		if(Layout==null){
			BuildOutput();
			return __Output.ToString();
		}
		if(__InLayout){
			//If we get here, then the layout is currently trying to render itself
			__InLayout=false;
			BuildOutput();
			return __Output.ToString();
		}else{
			//otherwise, we are here and someone called EViewRender on us(and we have a layout to render first)
			__InLayout=true;
			return Layout.EViewRender(); 
		}
		//This should recurse no more than 2 times
		//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set. 
	}
	public PerformanceView(){

	}
	void Write(string s){
		__Output.Append(s);
	}
	void WriteLine(string s){
		__Output.AppendLine(s);
	}
	void Write(IEView v){
		__Output.Append(v.EViewRender());
	}
}
} //for namespace

/*File: /home/earlz/Projects/EView/trunk/EView/Templates/TestChild.html */
namespace EViewEngine{
class TestChild : Earlz.EView.Internal.EViewDummy{
//Internal variables
	StringBuilder __Output=new StringBuilder();
public TestViewClass Layout{get;set;}
//vIEW VARIABLES//

//END VARIABLES//
//EXTERNAL CODE

//END EXTERNAL CODE
	void BuildOutput(){
//VIEW OUTPUT CODE//
__Output.Append(@"<!--
Copyright (c) 2010 - 2011 Jordan ""Earlz/hckr83"" Earls  <http://www.Earlz.biz.tm>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.
   
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This file is part of the EViewEngine project.
-->

");
__Output.Append(@"
");
__Output.Append(@"

This is a test child view
");

//END OUTPUT//
	}
//Internal code
	bool __InLayout=false; //internally used to prevent recursive loops in EViewRender()
	public override string EViewRender(){
		if(Layout==null){
			BuildOutput();
			return __Output.ToString();
		}
		if(__InLayout){
			//If we get here, then the layout is currently trying to render itself
			__InLayout=false;
			BuildOutput();
			return __Output.ToString();
		}else{
			//otherwise, we are here and someone called EViewRender on us(and we have a layout to render first)
			__InLayout=true;
			return Layout.EViewRender(); 
		}
		//This should recurse no more than 2 times
		//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set. 
	}
	public TestChild(){
Layout=new TestViewClass();
Layout.ChildView=this;

	}
	void Write(string s){
		__Output.Append(s);
	}
	void WriteLine(string s){
		__Output.AppendLine(s);
	}
	void Write(IEView v){
		__Output.Append(v.EViewRender());
	}
}
} //for namespace

/*File: /home/earlz/Projects/EView/trunk/EView/Templates/TestListItem.html */
namespace EViewEngine{
class TestListItem : TestViewBase{
//Internal variables
	StringBuilder __Output=new StringBuilder();
public IEView Layout{get;set;}
//vIEW VARIABLES//

//END VARIABLES//
//EXTERNAL CODE

//END EXTERNAL CODE
	void BuildOutput(){
//VIEW OUTPUT CODE//
__Output.Append(@"");
__Output.Append(@"
Blah I'm in a list
");

//END OUTPUT//
	}
//Internal code
	bool __InLayout=false; //internally used to prevent recursive loops in EViewRender()
	public override string EViewRender(){
		if(Layout==null){
			BuildOutput();
			return __Output.ToString();
		}
		if(__InLayout){
			//If we get here, then the layout is currently trying to render itself
			__InLayout=false;
			BuildOutput();
			return __Output.ToString();
		}else{
			//otherwise, we are here and someone called EViewRender on us(and we have a layout to render first)
			__InLayout=true;
			return Layout.EViewRender(); 
		}
		//This should recurse no more than 2 times
		//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set. 
	}
	public TestListItem(){

	}
	void Write(string s){
		__Output.Append(s);
	}
	void WriteLine(string s){
		__Output.AppendLine(s);
	}
	void Write(IEView v){
		__Output.Append(v.EViewRender());
	}
}
} //for namespace

/*File: /home/earlz/Projects/EView/trunk/EView/Templates/TestView.html */
namespace EViewEngine{
class TestViewClass : Earlz.EView.Internal.EViewDummy{
//Internal variables
	StringBuilder __Output=new StringBuilder();
public IEView Layout{get;set;}
//vIEW VARIABLES//
	public string Title{get;set;}
	public int SomeNumber{get;set;}
	public IEView SubContent{get;set;}
	public List<TestListItem> ContentList{get;set;}
	public string TestNull{get;set;}
	public IEView ChildView{get;set;}

//END VARIABLES//
//EXTERNAL CODE
string Foo(){
		return "Bar!";
	}

//END EXTERNAL CODE
	void BuildOutput(){
//VIEW OUTPUT CODE//
__Output.Append(@"");
__Output.Append(@"
<html>
<!--
Copyright (c) 2010 - 2011 Jordan ""Earlz/hckr83"" Earls  <http://www.Earlz.biz.tm>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.
   
THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This file is part of the EViewEngine project.
-->
	<head>
		<title>");
{
				object v;
				try{
					v=Title;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@"</title>
	</head>
	<body>
	");
__Output.Append(@"
	Dynamic content: <br />
	A number: ");
{
				object v;
				try{
					v=SomeNumber;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	");
if(SomeNumber<10){
			Write("SomeNumber is less than 10 <br />");
		}
__Output.Append(@" 
	");
if(SomeNumber<10){
__Output.Append(@"
		SomeNumber is still less than 10 :D
	");
}else{
__Output.Append(@"
		SomeNumber is not less than 10 :( 
	");
}
__Output.Append(@"
	SubContent: ");
{
				object v;
				try{
					v=SubContent;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	ContentList: ");
{
				object v;
				try{
					v=ContentList;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	Test external: ");
Write(Foo());
__Output.Append(@" <br />
	Test External raw output: ");

				__Output.Append(Foo());
__Output.Append(@" <br />
	");
__Output.Append(@"
	");
__Output.Append(@"
	This should display nothing: ");
{
				object v;
				try{
					v=TestNull.Length;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	This is a child view: ");
{
				object v;
				try{
					v=ChildView;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	This is a helper: ");
Write(new Hyperlink{Location="http://google.com", CssClass="foo",Text="My foo"});
__Output.Append(@"
	Foreach test: <br />
	");
var strings=new String[]{"Foo","Bar","Biz"};
__Output.Append(@"
	");
foreach(var s in strings){
__Output.Append(@"
		s=");
{
				object v;
				try{
					v=s;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@" <br />
	");
}
__Output.Append(@"

	</body>
</html>
");

//END OUTPUT//
	}
//Internal code
	bool __InLayout=false; //internally used to prevent recursive loops in EViewRender()
	public override string EViewRender(){
		if(Layout==null){
			BuildOutput();
			return __Output.ToString();
		}
		if(__InLayout){
			//If we get here, then the layout is currently trying to render itself
			__InLayout=false;
			BuildOutput();
			return __Output.ToString();
		}else{
			//otherwise, we are here and someone called EViewRender on us(and we have a layout to render first)
			__InLayout=true;
			return Layout.EViewRender(); 
		}
		//This should recurse no more than 2 times
		//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set. 
	}
	public TestViewClass(){

	}
	void Write(string s){
		__Output.Append(s);
	}
	void WriteLine(string s){
		__Output.AppendLine(s);
	}
	void Write(IEView v){
		__Output.Append(v.EViewRender());
	}
}
} //for namespace

/*File: /home/earlz/Projects/EView/trunk/EView/Templates/Helpers/Hyperlink.html */
namespace Earlz.EView.Helpers{
class Hyperlink : Earlz.EView.Helpers.HtmlElement{
//Internal variables
	StringBuilder __Output=new StringBuilder();
public IEView Layout{get;set;}
//vIEW VARIABLES//
	public string Location{get;set;}
	public string CssClass{get;set;}
	public string Text{get;set;}

//END VARIABLES//
//EXTERNAL CODE

//END EXTERNAL CODE
	void BuildOutput(){
//VIEW OUTPUT CODE//
__Output.Append(@"");
__Output.Append(@"
");
__Output.Append(@"
");
__Output.Append(@"
");
//Notice that this is a very dense way of doing it, but it is more clean then directly hard coding it as in HyperLink2
__Output.Append(@"
<a href=""");
{
				object v;
				try{
					v=Location;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@""" ");
if(CssClass!=null){
__Output.Append(@" class=""");
{
				object v;
				try{
					v=CssClass;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@"""");
}
__Output.Append(@">");
{
				object v;
				try{
					v=Text;
				}catch(NullReferenceException){
					v=null;
				}
					
				if(v!=null){
					var e=v as System.Collections.IEnumerable;
					if (e!=null)
					{
						foreach(var item in e){ 
							var view=item as Earlz.EView.IEView;
							if(view!=null){
								__Output.Append(view.EViewRender());
							}else{
								__Output.Append(item.ToString());
							}
						}
					}else{
						var view=v as Earlz.EView.IEView;
						if(view!=null){
							__Output.Append(view.EViewRender());
						}else{
							__Output.Append(v.ToString());
						}
					}
					
				}}
__Output.Append(@"</a>
");
/*
<a href="{=Location=}" {= ("class=\""+CssClass+"\"").OnlyIf(CssClass!=null) =}>{=Text=}</a> <!-- experimental syntax -->
<a href="{=Location=}" {= ("class=\"$CssClass$\"").OnlyIf(CssClass!=null) =}>{=Text=}</a> <!-- proposed eventual syntax -->
<a href="{=Location=}" {= CssClass.ToAttribute("class") =}</a> <!-- Super duper syntax :D -->
*/
__Output.Append(@"");

//END OUTPUT//
	}
//Internal code
	bool __InLayout=false; //internally used to prevent recursive loops in EViewRender()
	public override string EViewRender(){
		if(Layout==null){
			BuildOutput();
			return __Output.ToString();
		}
		if(__InLayout){
			//If we get here, then the layout is currently trying to render itself
			__InLayout=false;
			BuildOutput();
			return __Output.ToString();
		}else{
			//otherwise, we are here and someone called EViewRender on us(and we have a layout to render first)
			__InLayout=true;
			return Layout.EViewRender(); 
		}
		//This should recurse no more than 2 times
		//Basically, this will go to hell if there is ever more than 1 partial view with a Layout set. 
	}
	public Hyperlink(){

	}
	void Write(string s){
		__Output.Append(s);
	}
	void WriteLine(string s){
		__Output.AppendLine(s);
	}
	void Write(IEView v){
		__Output.Append(v.EViewRender());
	}
}
} //for namespace

//Internal base class
namespace Earlz.EView
{
	public interface IEView
	{
		string EViewRender();
	}
}
//internal empty namespace declaration
namespace Earlz.EView.Helpers{}

namespace Earlz.EView.Internal{
	public abstract class EViewDummy : Earlz.EView.IEView{ /*This is needed because we have to make a function overridden. */
		public virtual string EViewRender(){throw new NotImplementedException();}
	}
	 //experimental syntax helper
	public static class MyStringExtensions
	{
	    public static string OnlyIf(this string s,bool condition)
	    {
	        return condition ? s : String.Empty;
	    }
	    public static string ToAttribute(this string s, string attribute)
    	{
        	return String.IsNullOrEmpty(s) ? String.Empty : attribute + "=\"" + s + "\"";
    	}
	}
	
}



